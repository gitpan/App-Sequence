package App::Sequence;
use Simo;
use Carp;

# accessor
sub conf{ ac default => [], set_hook => sub{ _rearrange_conf( $_[1] ) } }

sub r{ ac default => {} } # return alias

sub sequence{ ac }

# constructor
sub new{
    my $self = shift;
    $self = $self->SUPER::new( @_ );
    
    return $self;
}

# method
sub run{
    my $self = shift;
    
    my $func_infos = _create_func_infos( $self->sequence );
    
    $self->_forward_conf_pos;
    $self->r({});
    foreach my $func_info ( @{ $func_infos } ){
        my( $func_name, $func_ref, $args, $ret_key )
            = @{ $func_info }{ qw( func_name func_ref args ret_key ) };
        
        $self->r->{ $ret_key } = $func_ref->( $args->() );
    }
}

# function
sub _rearrange_conf{
    my $conf = shift;
    
    # convert array ref
    my $confs = ref $conf eq 'ARRAY' ? $conf : [ $conf ];
    
    # conf check
    foreach my $conf ( @{ $confs } ){
        require YAML;
        $conf = YAML::LoadFile( $conf );
    }
    return $confs;
}

sub _conf_pos{ ac default => -1 }

sub _forward_conf_pos{
    my $self = shift;
    $self->_conf_pos( $self->_conf_pos + 1 );
}

sub c{ ac get_hook => sub{ $_[0]->_get_current_conf( @_ ) } }

sub _get_current_conf{
    my ( $self ) = @_;
    my $conf= $self->conf;
    my $conf_length = @{ $conf };
    
    my $c = $self->_conf_pos < $conf_length ? $self->conf->[ $self->_conf_pos ] :
            undef;
    return $c;
}

sub _create_func_infos{
    my @sequence = @_;
    
    require Carp;
    Carp::croak "should be sequence is key-value pairs" if @sequence % 2;
    
    my $func_infos = [];
    my $func_info = {};
    
    $DB::single = 1;
    while( my ( $key, $val ) = splice( @sequence, 0, 2 ) ){
        Carp::croak "you shoud be set some string into sequnce key" if ref $key || !$key;
        
        if( $key eq 'args' ){
            Carp::croak "double args" if $func_info->{ args };
            Carp::croak "should set function before 'args'"
                unless $func_info->{ func_name };
                
            $func_info->{ args } = $val;
        }
        elsif( $key eq 'ret' ){
            Carp::croak "double ret" if $func_info->{ ret_key };
            Carp::croak "should set function before 'ret'"
                unless $func_info->{ func_name };
                
            $func_info->{ ret_key } = $val;
        }
        else{
            if( $func_info->{ func_name } ){
                push @{ $func_infos }, \%{ $func_info };
                $func_info = {};
            }
            $func_info->{ func_name } = $key;
            $func_info->{ func_ref } = $val;
        }
    }
    
    if( $func_info->{ func_name } ){
        push @{ $func_infos }, \%{ $func_info };
    }
    
    return $func_infos;
}


=head1 NAME

App::Sequence - Multi-Subroutine executer for Sequence Oritened Program.

=head1 VERSION

Version 0.01

=cut

our $VERSION = '0.01_01';


=head1 SYNOPSIS

Quick summary of what the module does.

Perhaps a little code snippet.

    use App::Sequence;

    my $foo = App::Sequence->new();
    ...

=head1 EXPORT

A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.

=head1 FUNCTIONS

=head2 function1

=cut

sub function1 {
}

=head2 function2

=cut

sub function2 {
}

=head1 AUTHOR

Yuki, C<< <kimoto.yuki at gmail.com> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-app-sequence at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=App-Sequence>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc App::Sequence


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=App-Sequence>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/App-Sequence>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/App-Sequence>

=item * Search CPAN

L<http://search.cpan.org/dist/App-Sequence/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 COPYRIGHT & LICENSE

Copyright 2008 Yuki, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


=cut

1; # End of App::Sequence
